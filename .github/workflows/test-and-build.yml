name: React BMI Calculator - Test & Build Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Environment variables available to all jobs and steps
env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: node-modules

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-
      
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Lint code
        run: npm run lint || echo "Warning: Linting issues found"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-
      
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run unit tests
        run: npm test -- --watchAll=false --testPathPattern='/__tests__/unit/'
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            coverage
            test-results

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-
      
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run integration tests
        run: npm test -- --watchAll=false --testPathPattern='/__tests__/integration/'
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            coverage
            test-results

  build:
    name: Build Application
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-
      
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/

  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: preview
      url: ${{ steps.deployment.outputs.deployment-url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build

      - name: Deploy to Netlify (Preview)
        id: deployment
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy preview from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: false
          enable-commit-status: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  deploy-production:
    name: Deploy Production
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deployment.outputs.deployment-url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build

      - name: Deploy to Netlify (Production)
        id: deployment
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          production-deploy: true
          deploy-message: "Deploy production from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  notify:
    name: Notify on Completion
    needs: [deploy-preview, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check build status
        if: ${{ always() }}
        run: |
          if [[ "${{ needs.deploy-preview.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "::set-output name=status::success"
            echo "::set-output name=message::Build and deployment succeeded!"
          else
            echo "::set-output name=status::failure"
            echo "::set-output name=message::Build or deployment failed. Check logs for details."
          fi
        id: check

      - name: Send Slack notification
        # This is a placeholder - in a real scenario you'd use a proper Slack notification action
        if: ${{ always() }}
        run: |
          echo "Would send a Slack notification with status: ${{ steps.check.outputs.status }}"
          echo "Message: ${{ steps.check.outputs.message }}"
